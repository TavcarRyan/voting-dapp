/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Voting, VotingInterface } from "../Voting";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string[]",
        name: "candidateList",
        type: "string[]",
      },
    ],
    name: "NewCandidates",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "candidateList",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMembership",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "_candidateNames",
        type: "string[]",
      },
    ],
    name: "setCandidates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_candidate",
        type: "string",
      },
    ],
    name: "totalVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalVotesCasted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_candidate",
        type: "string",
      },
    ],
    name: "voteForCandidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "votesReceived",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f2a806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638d4b44d91161005b5780638d4b44d9146100ec578063abb88bcc1461011c578063b13c744b1461013a578063e89927ef1461016a5761007d565b806314e745d9146100825780635900f8f81461009e5780637c99279a146100ce575b600080fd5b61009c600480360381019061009791906108f7565b610186565b005b6100b860048036038101906100b39190610938565b61025c565b6040516100c59190610bce565b60405180910390f35b6100d6610284565b6040516100e39190610bce565b60405180910390f35b61010660048036038101906101019190610938565b61028a565b6040516101139190610bce565b60405180910390f35b6101246102b8565b6040516101319190610bac565b60405180910390f35b610154600480360381019061014f9190610979565b61031a565b6040516101619190610bac565b60405180910390f35b610184600480360381019061017f9190610938565b6103c6565b005b60005b81518110156102215760008282815181106101cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061020d929190610727565b50808061021990610df6565b915050610189565b507fb43c61c1f629242a5ff47b08a3d133f1bab4c00c54ca7ac0af06025b77da7502816040516102519190610b8a565b60405180910390a150565b600060038260405161026e9190610b5c565b9081526020016040518091039020549050919050565b60015481565b6003818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60606000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506103148161042a565b91505090565b6000818154811061032a57600080fd5b90600052602060002001600091509050805461034590610d93565b80601f016020809104026020016040519081016040528092919081815260200182805461037190610d93565b80156103be5780601f10610393576101008083540402835291602001916103be565b820191906000526020600020905b8154815290600101906020018083116103a157829003601f168201915b505050505081565b6103cf81610653565b6103d857600080fd5b60018060008282546103ea9190610cf1565b9250508190555060016003826040516104039190610b5c565b908152602001604051809103902060008282546104209190610cf1565b9250508190555050565b6060816002811115610465577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000600281111561049f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156104e2576040518060400160405280600481526020017f4672656500000000000000000000000000000000000000000000000000000000815250905061064e565b81600281111561051b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60016002811115610555577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610598576040518060400160405280600781526020017f436974697a656e00000000000000000000000000000000000000000000000000815250905061064e565b8160028111156105d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028081111561060a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561064d576040518060400160405280600781526020017f4469616d6f6e6400000000000000000000000000000000000000000000000000815250905061064e565b5b919050565b600080600090505b60008054905081101561071c57826040516020016106799190610b5c565b60405160208183030381529060405280519060200120600082815481106106c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020016040516020016106e39190610b73565b604051602081830303815290604052805190602001201415610709576001915050610722565b808061071490610df6565b91505061065b565b50600090505b919050565b82805461073390610d93565b90600052602060002090601f016020900481019282610755576000855561079c565b82601f1061076e57805160ff191683800117855561079c565b8280016001018555821561079c579182015b8281111561079b578251825591602001919060010190610780565b5b5090506107a991906107ad565b5090565b5b808211156107c65760008160009055506001016107ae565b5090565b60006107dd6107d884610c0e565b610be9565b905080838252602082019050828560208602820111156107fc57600080fd5b60005b8581101561084657813567ffffffffffffffff81111561081e57600080fd5b80860161082b89826108b8565b855260208501945060208401935050506001810190506107ff565b5050509392505050565b600061086361085e84610c3a565b610be9565b90508281526020810184848401111561087b57600080fd5b610886848285610d51565b509392505050565b600082601f83011261089f57600080fd5b81356108af8482602086016107ca565b91505092915050565b600082601f8301126108c957600080fd5b81356108d9848260208601610850565b91505092915050565b6000813590506108f181610edd565b92915050565b60006020828403121561090957600080fd5b600082013567ffffffffffffffff81111561092357600080fd5b61092f8482850161088e565b91505092915050565b60006020828403121561094a57600080fd5b600082013567ffffffffffffffff81111561096457600080fd5b610970848285016108b8565b91505092915050565b60006020828403121561098b57600080fd5b6000610999848285016108e2565b91505092915050565b60006109ae8383610a2b565b905092915050565b60006109c182610c90565b6109cb8185610cb3565b9350836020820285016109dd85610c6b565b8060005b85811015610a1957848403895281516109fa85826109a2565b9450610a0583610ca6565b925060208a019950506001810190506109e1565b50829750879550505050505092915050565b6000610a3682610c9b565b610a408185610cc4565b9350610a50818560208601610d60565b610a5981610ecc565b840191505092915050565b6000610a6f82610c9b565b610a798185610cd5565b9350610a89818560208601610d60565b610a9281610ecc565b840191505092915050565b6000610aa882610c9b565b610ab28185610ce6565b9350610ac2818560208601610d60565b80840191505092915050565b60008154610adb81610d93565b610ae58186610ce6565b94506001821660008114610b005760018114610b1157610b44565b60ff19831686528186019350610b44565b610b1a85610c7b565b60005b83811015610b3c57815481890152600182019150602081019050610b1d565b838801955050505b50505092915050565b610b5681610d47565b82525050565b6000610b688284610a9d565b915081905092915050565b6000610b7f8284610ace565b915081905092915050565b60006020820190508181036000830152610ba481846109b6565b905092915050565b60006020820190508181036000830152610bc68184610a64565b905092915050565b6000602082019050610be36000830184610b4d565b92915050565b6000610bf3610c04565b9050610bff8282610dc5565b919050565b6000604051905090565b600067ffffffffffffffff821115610c2957610c28610e9d565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610c5557610c54610e9d565b5b610c5e82610ecc565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610cfc82610d47565b9150610d0783610d47565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3c57610d3b610e3f565b5b828201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610d7e578082015181840152602081019050610d63565b83811115610d8d576000848401525b50505050565b60006002820490506001821680610dab57607f821691505b60208210811415610dbf57610dbe610e6e565b5b50919050565b610dce82610ecc565b810181811067ffffffffffffffff82111715610ded57610dec610e9d565b5b80604052505050565b6000610e0182610d47565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e3457610e33610e3f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610ee681610d47565b8114610ef157600080fd5b5056fea2646970667358221220012e97e790afccde7080e26a0ca61dc1578ef0bb59a7bdfdf76d78689b6e708f64736f6c63430008040033";

type VotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Voting__factory extends ContractFactory {
  constructor(...args: VotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Voting> {
    return super.deploy(overrides || {}) as Promise<Voting>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Voting {
    return super.attach(address) as Voting;
  }
  connect(signer: Signer): Voting__factory {
    return super.connect(signer) as Voting__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingInterface {
    return new utils.Interface(_abi) as VotingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Voting {
    return new Contract(address, _abi, signerOrProvider) as Voting;
  }
}
