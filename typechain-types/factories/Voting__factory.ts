/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Voting, VotingInterface } from "../Voting";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string[]",
        name: "candidateList",
        type: "string[]",
      },
    ],
    name: "NewCandidates",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "candidateList",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "_candidateNames",
        type: "string[]",
      },
    ],
    name: "setCandidates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_candidate",
        type: "string",
      },
    ],
    name: "totalVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalVotesCasted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_candidate",
        type: "string",
      },
    ],
    name: "voteForCandidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "votesReceived",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c66806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806314e745d9146100675780635900f8f8146100835780637c99279a146100b35780638d4b44d9146100d1578063b13c744b14610101578063e89927ef14610131575b600080fd5b610081600480360381019061007c9190610633565b61014d565b005b61009d60048036038101906100989190610674565b610223565b6040516100aa919061090a565b60405180910390f35b6100bb61024b565b6040516100c8919061090a565b60405180910390f35b6100eb60048036038101906100e69190610674565b610251565b6040516100f8919061090a565b60405180910390f35b61011b600480360381019061011691906106b5565b61027f565b60405161012891906108e8565b60405180910390f35b61014b60048036038101906101469190610674565b61032b565b005b60005b81518110156101e8576000828281518110610194577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906101d4929190610463565b5080806101e090610b32565b915050610150565b507fb43c61c1f629242a5ff47b08a3d133f1bab4c00c54ca7ac0af06025b77da75028160405161021891906108c6565b60405180910390a150565b60006002826040516102359190610898565b9081526020016040518091039020549050919050565b60015481565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000818154811061028f57600080fd5b9060005260206000200160009150905080546102aa90610acf565b80601f01602080910402602001604051908101604052809291908181526020018280546102d690610acf565b80156103235780601f106102f857610100808354040283529160200191610323565b820191906000526020600020905b81548152906001019060200180831161030657829003601f168201915b505050505081565b6103348161038f565b61033d57600080fd5b600180600082825461034f9190610a2d565b9250508190555060016002826040516103689190610898565b908152602001604051809103902060008282546103859190610a2d565b9250508190555050565b600080600090505b60008054905081101561045857826040516020016103b59190610898565b6040516020818303038152906040528051906020012060008281548110610405577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160405160200161041f91906108af565b60405160208183030381529060405280519060200120141561044557600191505061045e565b808061045090610b32565b915050610397565b50600090505b919050565b82805461046f90610acf565b90600052602060002090601f01602090048101928261049157600085556104d8565b82601f106104aa57805160ff19168380011785556104d8565b828001600101855582156104d8579182015b828111156104d75782518255916020019190600101906104bc565b5b5090506104e591906104e9565b5090565b5b808211156105025760008160009055506001016104ea565b5090565b60006105196105148461094a565b610925565b9050808382526020820190508285602086028201111561053857600080fd5b60005b8581101561058257813567ffffffffffffffff81111561055a57600080fd5b80860161056789826105f4565b8552602085019450602084019350505060018101905061053b565b5050509392505050565b600061059f61059a84610976565b610925565b9050828152602081018484840111156105b757600080fd5b6105c2848285610a8d565b509392505050565b600082601f8301126105db57600080fd5b81356105eb848260208601610506565b91505092915050565b600082601f83011261060557600080fd5b813561061584826020860161058c565b91505092915050565b60008135905061062d81610c19565b92915050565b60006020828403121561064557600080fd5b600082013567ffffffffffffffff81111561065f57600080fd5b61066b848285016105ca565b91505092915050565b60006020828403121561068657600080fd5b600082013567ffffffffffffffff8111156106a057600080fd5b6106ac848285016105f4565b91505092915050565b6000602082840312156106c757600080fd5b60006106d58482850161061e565b91505092915050565b60006106ea8383610767565b905092915050565b60006106fd826109cc565b61070781856109ef565b935083602082028501610719856109a7565b8060005b85811015610755578484038952815161073685826106de565b9450610741836109e2565b925060208a0199505060018101905061071d565b50829750879550505050505092915050565b6000610772826109d7565b61077c8185610a00565b935061078c818560208601610a9c565b61079581610c08565b840191505092915050565b60006107ab826109d7565b6107b58185610a11565b93506107c5818560208601610a9c565b6107ce81610c08565b840191505092915050565b60006107e4826109d7565b6107ee8185610a22565b93506107fe818560208601610a9c565b80840191505092915050565b6000815461081781610acf565b6108218186610a22565b9450600182166000811461083c576001811461084d57610880565b60ff19831686528186019350610880565b610856856109b7565b60005b8381101561087857815481890152600182019150602081019050610859565b838801955050505b50505092915050565b61089281610a83565b82525050565b60006108a482846107d9565b915081905092915050565b60006108bb828461080a565b915081905092915050565b600060208201905081810360008301526108e081846106f2565b905092915050565b6000602082019050818103600083015261090281846107a0565b905092915050565b600060208201905061091f6000830184610889565b92915050565b600061092f610940565b905061093b8282610b01565b919050565b6000604051905090565b600067ffffffffffffffff82111561096557610964610bd9565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561099157610990610bd9565b5b61099a82610c08565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610a3882610a83565b9150610a4383610a83565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a7857610a77610b7b565b5b828201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610aba578082015181840152602081019050610a9f565b83811115610ac9576000848401525b50505050565b60006002820490506001821680610ae757607f821691505b60208210811415610afb57610afa610baa565b5b50919050565b610b0a82610c08565b810181811067ffffffffffffffff82111715610b2957610b28610bd9565b5b80604052505050565b6000610b3d82610a83565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b7057610b6f610b7b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610c2281610a83565b8114610c2d57600080fd5b5056fea264697066735822122053c18de6835a5824f51c4deeb28e1d4780c3e6c300156160fcdbda24616b7b3864736f6c63430008040033";

type VotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Voting__factory extends ContractFactory {
  constructor(...args: VotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Voting> {
    return super.deploy(overrides || {}) as Promise<Voting>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Voting {
    return super.attach(address) as Voting;
  }
  connect(signer: Signer): Voting__factory {
    return super.connect(signer) as Voting__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingInterface {
    return new utils.Interface(_abi) as VotingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Voting {
    return new Contract(address, _abi, signerOrProvider) as Voting;
  }
}
