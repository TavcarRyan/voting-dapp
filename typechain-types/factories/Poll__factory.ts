/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Poll, PollInterface } from "../Poll";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "_optionTitles",
        type: "string[]",
      },
      {
        internalType: "uint256",
        name: "_expiryBlockNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "_createPoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "chairpersonPollCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "getPoll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "chairperson",
            type: "address",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "expiryBlockNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionsAmount",
            type: "uint256",
          },
          {
            internalType: "string[]",
            name: "options",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "optionVotes",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "totalVotes",
            type: "uint256",
          },
        ],
        internalType: "struct Poll.Voting",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "pollToChairperson",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "polls",
    outputs: [
      {
        internalType: "address",
        name: "chairperson",
        type: "address",
      },
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "expiryBlockNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionsAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalVotes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalPolls",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_option",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611532806100206000396000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c8063a2eeeb2f1161005b578063a2eeeb2f14610111578063ac2f00741461012f578063b384abef14610163578063b93ae2db1461017f5761007c565b8062ecb74b146100815780631a8cbcaa146100b15780634217bab5146100e1575b600080fd5b61009b60048036038101906100969190610e21565b61019b565b6040516100a891906110dd565b60405180910390f35b6100cb60048036038101906100c69190610e21565b6101ce565b6040516100d89190611152565b60405180910390f35b6100fb60048036038101906100f69190610d65565b610432565b6040516101089190611174565b60405180910390f35b61011961044a565b6040516101269190611174565b60405180910390f35b61014960048036038101906101449190610e21565b610450565b60405161015a9594939291906110f8565b60405180910390f35b61017d60048036038101906101789190610e4a565b61052e565b005b61019960048036038101906101949190610d8e565b61081a565b005b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101d6610a1c565b600160008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461025a90611384565b80601f016020809104026020016040519081016040528092919081815260200182805461028690611384565b80156102d35780601f106102a8576101008083540402835291602001916102d3565b820191906000526020600020905b8154815290600101906020018083116102b657829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156103c157838290600052602060002001805461033490611384565b80601f016020809104026020016040519081016040528092919081815260200182805461036090611384565b80156103ad5780601f10610382576101008083540402835291602001916103ad565b820191906000526020600020905b81548152906001019060200180831161039057829003601f168201915b505050505081526020019060010190610315565b5050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561041857602002820191906000526020600020905b815481526020019060010190808311610404575b505050505081526020016006820154815250509050919050565b60036020528060005260406000206000915090505481565b60005481565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461049990611384565b80601f01602080910402602001604051908101604052809291908181526020018280546104c590611384565b80156105125780601f106104e757610100808354040283529160200191610512565b820191906000526020600020905b8154815290600101906020018083116104f557829003601f168201915b5050505050908060020154908060030154908060060154905085565b6000600160008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546105b490611384565b80601f01602080910402602001604051908101604052809291908181526020018280546105e090611384565b801561062d5780601f106106025761010080835404028352916020019161062d565b820191906000526020600020905b81548152906001019060200180831161061057829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561071b57838290600052602060002001805461068e90611384565b80601f01602080910402602001604051908101604052809291908181526020018280546106ba90611384565b80156107075780601f106106dc57610100808354040283529160200191610707565b820191906000526020600020905b8154815290600101906020018083116106ea57829003601f168201915b50505050508152602001906001019061066f565b5050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561077257602002820191906000526020600020905b81548152602001906001019080831161075e575b50505050508152602001600682015481525050905060018160a0015184815181106107c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181516107da91906112b0565b9150818152505060018160c0018181516107f491906112b0565b9150818152505060018160c00181815161080e91906112b0565b91508181525050505050565b60006108258461096a565b90506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018481526020018551815260200185815260200182815260200160008152506001600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906108e8929190610a6f565b5060408201518160020155606082015181600301556080820151816004019080519060200190610919929190610af5565b5060a0820151816005019080519060200190610936929190610b55565b5060c082015181600601559050506002600083815260200190815260200160002060009054906101000a9050505050505050565b6060600080600090505b835181101561099e578180610988906113e7565b9250508080610996906113e7565b915050610974565b5060008167ffffffffffffffff8111156109e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a0f5781602001602082028036833780820191505090505b5090508092505050919050565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600081526020016060815260200160608152602001600081525090565b828054610a7b90611384565b90600052602060002090601f016020900481019282610a9d5760008555610ae4565b82601f10610ab657805160ff1916838001178555610ae4565b82800160010185558215610ae4579182015b82811115610ae3578251825591602001919060010190610ac8565b5b509050610af19190610ba2565b5090565b828054828255906000526020600020908101928215610b44579160200282015b82811115610b43578251829080519060200190610b33929190610a6f565b5091602001919060010190610b15565b5b509050610b519190610bbf565b5090565b828054828255906000526020600020908101928215610b91579160200282015b82811115610b90578251825591602001919060010190610b75565b5b509050610b9e9190610ba2565b5090565b5b80821115610bbb576000816000905550600101610ba3565b5090565b5b80821115610bdf5760008181610bd69190610be3565b50600101610bc0565b5090565b508054610bef90611384565b6000825580601f10610c015750610c20565b601f016020900490600052602060002090810190610c1f9190610ba2565b5b50565b6000610c36610c31846111b4565b61118f565b90508083825260208201905082856020860282011115610c5557600080fd5b60005b85811015610c9f57813567ffffffffffffffff811115610c7757600080fd5b808601610c848982610d26565b85526020850194506020840193505050600181019050610c58565b5050509392505050565b6000610cbc610cb7846111e0565b61118f565b905082815260208101848484011115610cd457600080fd5b610cdf848285611342565b509392505050565b600081359050610cf6816114ce565b92915050565b600082601f830112610d0d57600080fd5b8135610d1d848260208601610c23565b91505092915050565b600082601f830112610d3757600080fd5b8135610d47848260208601610ca9565b91505092915050565b600081359050610d5f816114e5565b92915050565b600060208284031215610d7757600080fd5b6000610d8584828501610ce7565b91505092915050565b60008060008060808587031215610da457600080fd5b600085013567ffffffffffffffff811115610dbe57600080fd5b610dca87828801610d26565b945050602085013567ffffffffffffffff811115610de757600080fd5b610df387828801610cfc565b9350506040610e0487828801610d50565b9250506060610e1587828801610d50565b91505092959194509250565b600060208284031215610e3357600080fd5b6000610e4184828501610d50565b91505092915050565b60008060408385031215610e5d57600080fd5b6000610e6b85828601610d50565b9250506020610e7c85828601610d50565b9150509250929050565b6000610e928383610fa3565b905092915050565b6000610ea683836110bf565b60208301905092915050565b610ebb81611306565b82525050565b610eca81611306565b82525050565b6000610edb82611231565b610ee5818561126c565b935083602082028501610ef785611211565b8060005b85811015610f335784840389528151610f148582610e86565b9450610f1f83611252565b925060208a01995050600181019050610efb565b50829750879550505050505092915050565b6000610f508261123c565b610f5a818561127d565b9350610f6583611221565b8060005b83811015610f96578151610f7d8882610e9a565b9750610f888361125f565b925050600181019050610f69565b5085935050505092915050565b6000610fae82611247565b610fb8818561128e565b9350610fc8818560208601611351565b610fd1816114bd565b840191505092915050565b6000610fe782611247565b610ff1818561129f565b9350611001818560208601611351565b61100a816114bd565b840191505092915050565b600060e08301600083015161102d6000860182610eb2565b50602083015184820360208601526110458282610fa3565b915050604083015161105a60408601826110bf565b50606083015161106d60608601826110bf565b50608083015184820360808601526110858282610ed0565b91505060a083015184820360a086015261109f8282610f45565b91505060c08301516110b460c08601826110bf565b508091505092915050565b6110c881611338565b82525050565b6110d781611338565b82525050565b60006020820190506110f26000830184610ec1565b92915050565b600060a08201905061110d6000830188610ec1565b818103602083015261111f8187610fdc565b905061112e60408301866110ce565b61113b60608301856110ce565b61114860808301846110ce565b9695505050505050565b6000602082019050818103600083015261116c8184611015565b905092915050565b600060208201905061118960008301846110ce565b92915050565b60006111996111aa565b90506111a582826113b6565b919050565b6000604051905090565b600067ffffffffffffffff8211156111cf576111ce61148e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111fb576111fa61148e565b5b611204826114bd565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006112bb82611338565b91506112c683611338565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112fb576112fa611430565b5b828201905092915050565b600061131182611318565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561136f578082015181840152602081019050611354565b8381111561137e576000848401525b50505050565b6000600282049050600182168061139c57607f821691505b602082108114156113b0576113af61145f565b5b50919050565b6113bf826114bd565b810181811067ffffffffffffffff821117156113de576113dd61148e565b5b80604052505050565b60006113f282611338565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561142557611424611430565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6114d781611306565b81146114e257600080fd5b50565b6114ee81611338565b81146114f957600080fd5b5056fea264697066735822122095c8211ae233c66a10ef93ae7f51ca59f1aab7fcbb1bc07085ca068240c8b7db64736f6c63430008040033";

type PollConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PollConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Poll__factory extends ContractFactory {
  constructor(...args: PollConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Poll> {
    return super.deploy(overrides || {}) as Promise<Poll>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Poll {
    return super.attach(address) as Poll;
  }
  connect(signer: Signer): Poll__factory {
    return super.connect(signer) as Poll__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PollInterface {
    return new utils.Interface(_abi) as PollInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Poll {
    return new Contract(address, _abi, signerOrProvider) as Poll;
  }
}
